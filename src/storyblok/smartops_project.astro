---
import type { SmartopsProject } from '../utils/useSchemas';
import { projectCategories } from '../utils/useLists';
import TechnologyButton from '../components/reusable/TechnologyButton.astro';
import { renderRichText } from '@storyblok/astro';
import { resizeImage } from '../utils/useImageOptimization';

interface Props {
	blok: SmartopsProject;
}

const { blok } = Astro.props;
---

<div class='relative flex flex-col gap-sm pb-sm'>
	<div class='h-screen relative w-full flex items-end px-md pb-[10%]'>
		<img
			class='absolute inset-0 h-screen w-full object-cover z-[-1]'
			src={resizeImage(blok.project_image.filename)}
			alt={blok.project_image.alt}
		/>
		<h1 class='max-w-normal mx-auto text-light title w-full'>
			{blok.project_title}
		</h1>
	</div>
	<div class='flex flex-col gap-lg px-md'>
		<div class='max-w-normal mx-auto flex flex-wrap gap-sm w-full'>
			{
				blok.project_categories.map((category) => (
					<TechnologyButton
						class:list={[
							'text-white',
							{ 'bg-green': category.includes('technology') },
							{ 'bg-dark': !category.includes('technology') },
						]}>
						{projectCategories.find((c) => c.value === category)?.name}
					</TechnologyButton>
				))
			}
		</div>
		{
			blok.project_sections.map((section) => {
				if (section.component === 'project_section_text') {
					return (
						<div class='max-w-normal mx-auto w-full subtitle font-normal'>
							<div
								class='flex flex-col gap-xs'
								set:html={renderRichText(section.section_richtext)}
							/>
						</div>
					);
				}
				if (section.component === 'project_section_assets') {
					return (
						<div class='max-w-normal mx-auto w-full flex flex-col gap-xs'>
							<div class='w-full'>
								<img
									id='project-image-display'
									class='w-full h-auto cursor-pointer'
									src={resizeImage(section.section_assets[0].filename)}
									alt={section.section_assets[0].alt}
								/>
								<div
									id='project-image-progress'
									class='w-0 h-[4px] bg-green'
								/>
							</div>
							<div class='grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-xs'>
								{section.section_assets.map((asset) => (
									<img
										id={`project-image-${asset.id}`}
										class='project-image-preview w-full aspect-[4/3] object-cover cursor-pointer'
										src={resizeImage(asset.filename)}
										alt={asset.alt}
									/>
								))}
							</div>
						</div>
					);
				}
			})
		}
	</div>
</div>
<script>
	import gsap from 'gsap';

	const imagePreviews = document.querySelectorAll(
		'.project-image-preview'
	) as NodeListOf<HTMLImageElement>;
	const displayImage = document.getElementById('project-image-display') as HTMLImageElement | null;
	const progressBar = document.getElementById('project-image-progress') as HTMLDivElement | null;

	const changeDisplayImage = (preview: HTMLImageElement) => {
		if (displayImage && displayImage.src !== preview.src) {
			displayImage.src = preview.src;
			displayImage.alt = preview.alt;
			displayImage.classList.add('opacity-0');
			progressBar?.classList.add('opacity-0');
		}
	};

	imagePreviews.forEach((preview) => {
		preview.addEventListener('click', () => changeDisplayImage(preview));
	});

	displayImage?.addEventListener('click', () => {
		if (displayImage) {
			const imageWindow = window.open(displayImage.src, '_blank');
			imageWindow?.focus();
		}
	});

	displayImage?.addEventListener('load', () => {
		displayImage.classList.remove('opacity-0');
		progressBar?.classList.remove('opacity-0');
		anim.restart();
	});

	const anim = gsap.fromTo(
		'#project-image-progress',
		{ width: 0 },
		{
			width: '100%',
			duration: 8,
			ease: 'linear',
			onComplete: () => {
				let nextIndex =
					Array.from(imagePreviews).findIndex((preview) => preview.src === displayImage?.src) + 1;
				if (nextIndex >= imagePreviews.length) {
					nextIndex = 0;
				}
				const nextDisplayImage = imagePreviews[nextIndex];
				changeDisplayImage(nextDisplayImage);
			},
		}
	);
</script>
